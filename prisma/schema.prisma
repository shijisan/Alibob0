generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  name      String
  role      Role     @default(BUYER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  buyer     Buyer?   @relation("UserToBuyer")
  seller    Seller?  @relation("UserToSeller")
  cart      Cart?    @relation("UserToCart")
  orders    Order[]  @relation("UserToOrders")
  isDeleted Boolean  @default(false)
}

model Buyer {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation("UserToBuyer", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
}

model Seller {
  id              String    @id @default(uuid())
  userId          String    @unique
  user            User      @relation("UserToSeller", fields: [userId], references: [id], onDelete: Cascade)
  isVerified      Boolean   @default(false)
  shopName        String    @db.VarChar(100)
  shopDescription String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  products        Product[] @relation("SellerToProducts")
  isDeleted       Boolean   @default(false)
}

model Admin {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String     @id @default(uuid())
  name      String     @unique @db.VarChar(100)
  parentId  String?    @db.VarChar(36) // Support hierarchical categories
  parent    Category?  @relation("ParentToChild", fields: [parentId], references: [id])
  children  Category[] @relation("ParentToChild")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  products  Product[]  @relation("CategoryToProducts")
  isDeleted Boolean    @default(false)
}

model Cart {
  id        String      @id @default(uuid())
  userId    String      @unique
  user      User        @relation("UserToCart", fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]  @relation("CartToCartItems")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  isDeleted Boolean     @default(false)
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation("CartToCartItems", fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation("ProductToCartItems", fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([cartId, productId])
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

model Order {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation("UserToOrders", fields: [userId], references: [id], onDelete: Cascade)
  items         OrderItem[] @relation("OrderToOrderItems")
  addressLine1  String
  addressLine2  String?
  city          String
  province      String
  postalCode    String
  country       String
  status        OrderStatus @default(coordinating_with_shipping)
  paymentStatus PaymentStatus @default(pending)
  totalAmount   Float       @default(0.0) // Added to store order total
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  isDeleted     Boolean     @default(false)
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation("OrderToOrderItems", fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation("ProductToOrderItems", fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String      @id @default(uuid())
  sellerId    String
  seller      Seller      @relation("SellerToProducts", fields: [sellerId], references: [id], onDelete: Cascade)
  categoryId  String
  category    Category    @relation("CategoryToProducts", fields: [categoryId], references: [id], onDelete: Cascade)
  name        String
  description String
  price       Float
  imageUrl    String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  cartItems   CartItem[]  @relation("ProductToCartItems")
  orderItems  OrderItem[] @relation("ProductToOrderItems")
  isDeleted   Boolean     @default(false)
}

enum OrderStatus {
  coordinating_with_shipping
  shipping
  on_the_way
  completed
  canceled
}

enum PaymentStatus {
  pending
  paid
  failed
}
